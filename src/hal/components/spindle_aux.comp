/**
 * Reference: Comp HAL Component Generator
 * http://linuxcnc.org/docs/html/hal/comp.html
 **/

component spindle_aux "Spindle with pulse command interface";

//pin in  float velocity-cmd = 0   "Commanded speed (rps)";
pin in  float css-error-velocity-cmd = 0   "Commanded speed (rps*radius)";
pin in  float aux-radius= 0      "aux-radius";

pin in  float position-cmd = 0   "Commanded position";
pin in  float feedback-vel = 0   "Feedback velocity based on spindle encoder";
pin in  bit   velocity-mode = 0  "Velocity(1) or position(0) mode";
pin in  bit   on = 0             "Spindle on";

pin out bit   at-speed       "Set when spindle is at speed for velocity-mode";
pin out bit   in-position    "Set when spindle is in position for position-mode";
pin out float curr-pos       "Feedback position, in revolutions";
pin out float curr-vel       "Current velocity (rps)";
pin out float curr-acc       "Current acceleration (rev/s^2)";
pin out float speed-rpm      "Current speed in RPM";
param   rw  float   max-vel  "Max velocity";
param   rw  float   max-acc  "Max acceleration";
param   rw  float   max-jerk "Max jerk";
param   rw  float   at-speed-range = 0 "At speed range (0.0(0%) ~ 1.0(100%)); the less the more accurate";

/*
param   rw  float   scale = 1.0
"""factor applied to \\fBvelocity-cmd\\fP.

The result of '\\fBvelocity-cmd\\fP * \\fBscale\\fP' be in revolutions per second.
For example, if \\fBvelocity-cmd\\fP is in revolutions/minute, \\fBscale\\fP should be set to 1/60 or 0.016666667.
""";
*/

license "GPL";

function _;

;;

#include <stdio.h>
#include <assert.h>
#include <rtapi_math.h>
#include <posemath.h>

typedef enum {
    S_IDLE,
    S_VEL_MODE,
    S_VEL_DECEL,
    S_POS_MODE,
} spindle_state_t;


/**
 * vel_ctrl: Velocity Control
 *           Algorithm is taking from simple_tp.c
 **/
void vel_ctrl (double vel_cmd, double period)
{
    double max_da, tiny_dv, vel_err, acc_req;
    // static double curr_vel, curr_acc; // global signal

    max_da = max_jerk * period;
    tiny_dv = max_da * period * 0.001;

    vel_cmd = vel_cmd / aux_radius;
    //printf("vel_cmd(%f)", vel_cmd);
    
    /* limit velocity cmd */
    if (vel_cmd > max_vel) {
        vel_cmd = max_vel;
    } else if (vel_cmd < -max_vel) {
        vel_cmd = -max_vel;
    }

    /* calculate desired acceleration */

    /* request a acceleration that tends to drive
       vel_err to zero, but allows for stopping without velocity
       overshoot */
    vel_err = vel_cmd - curr_vel;
    /* positive and negative errors require some sign flipping to
       avoid sqrt(negative) */
    if (vel_err > tiny_dv) {
        acc_req = -max_da +
                   sqrt(2.0 * max_jerk * vel_err + max_da * max_da);
    } else if (vel_err < -tiny_dv) {
        acc_req =  max_da -
                   sqrt(-2.0 * max_jerk * vel_err + max_da * max_da);
    } else {
        /* within 'tiny_dv' of desired vel, no need to accel */
        acc_req = 0;
        curr_vel = vel_cmd;
//        if (curr_vel != 0) {
//            at_speed = 1;
//        }
    }

    /* limit acceleration request */
    if (acc_req > max_acc) {
        acc_req = max_acc;
    } else if (acc_req < -max_acc) {
        acc_req = -max_acc;
    }

    /* ramp acceleration toward request at jerk limit */
    if (acc_req > (curr_acc + max_da)) {
        curr_acc += max_da;
    } else if (acc_req < (curr_acc - max_da)) {
        curr_acc -= max_da;
    } else {
        curr_acc = acc_req;
    }

    /* integrate acceleration to get new velocity */
    curr_vel += curr_acc * period;
}


FUNCTION(_) {
    // double old_position = position_fb;
    // double new_position = position_fb + css_error_velocity_cmd * fperiod * scale;

    // if(index_enable && (floor(old_position) != floor(new_position))) {
    //     index_enable = false;
    //     if(css_error_velocity_cmd < 0)
    //         new_position = new_position - ceil(new_position);
    //     else
    //         new_position = new_position - floor(new_position);
    // }
    // position_fb = new_position;
    double tmp;
    //double velocity_cmd;
    static spindle_state_t cur_state = S_IDLE;
    
    if ((!on) && (curr_vel == 0))
    {
        cur_state = S_IDLE;
    }
            

    //printf("cur_state(%d)\n", cur_state);
    switch (cur_state)
    {
        case S_IDLE:
//            at_speed = 1;
            curr_vel = 0;
            in_position = 0;
            if (on) {
                if (velocity_mode) {
                    cur_state = S_VEL_MODE;
//                    at_speed = 0;
                } else {
                    cur_state = S_POS_MODE;
                }
            }
            break;

        case S_VEL_MODE:
            /* will set at-speed as 1 inside vel_ctrl() */
            //velocity_cmd = css_error_velocity_cmd / aux_radius;
            //printf("velocity_cmd(%f) css_error_velocity_cmd(%f)\n", velocity_cmd, css_error_velocity_cmd);
            vel_ctrl (css_error_velocity_cmd, fperiod);
            curr_pos += curr_vel * fperiod;
            if ((!on) || (!velocity_mode)) {
                cur_state = S_VEL_DECEL;
            }
            break;

        case S_VEL_DECEL:
            // decel to vel == 0
//            at_speed = 0;
            in_position = 0;
            vel_ctrl (0, fperiod);
            if (curr_vel == 0) {
                cur_state = S_IDLE;
            } else if (on && velocity_mode) {
                cur_state = S_VEL_MODE;
            }
            break;

        case S_POS_MODE:
            // TODO
//            at_speed = 1;
            in_position = 1;
            tmp = curr_vel;
            curr_vel = (position_cmd - curr_pos) / fperiod;
            curr_acc = curr_vel - tmp;
            curr_pos = position_cmd;
            if ((!on) || (velocity_mode)) 
            {
                cur_state = S_VEL_DECEL;
            }
            break;

        default:
            assert(0);
            break;
    }

    if (curr_vel == 0)
    {
        if (fabs(feedback_vel) < at_speed_range) {
            at_speed = 1;
        } else {
            at_speed = 0;
        }
    } else {
        if ((fabs(1 - feedback_vel/curr_vel)) < at_speed_range) {
            at_speed = 1;
        } else {
            at_speed = 0;
        }
    }

    speed_rpm = curr_vel * 60.0;
}


