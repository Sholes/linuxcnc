/**
 * Reference: Comp HAL Component Generator
 * http://linuxcnc.org/docs/html/hal/comp.html
 **/

component jog "control MPG and CONT jogging";

pin in  bit     mpg-joint-sel.#[3]      "array of mpg-joint-sel signals";
pin in  bit     wheel-jog-active.#[6]   "array of wheel-jog-active signals";

pin out  u32    jog-sel                 "bitwise jog select signal";
pin out  bit    wheel-jog-enable.#[6]   "array of wheel-jog-enable signals for handle_jogwheels()";

param rw  u32   master-gantry-id        "";
param rw  u32   slave-gantry-id         "";


license "GPL";

function _;

;;

#include <stdio.h>
#include <assert.h>
#include <rtapi_math.h>
#include <posemath.h>

FUNCTION(_)
{
    int mpg_joint_code;
    int i;

    jog_sel = (wheel_jog_active(5) << 5) |
              (wheel_jog_active(4) << 4) |
              (wheel_jog_active(3) << 3) |
              (wheel_jog_active(2) << 2) |
              (wheel_jog_active(1) << 1) |
              (wheel_jog_active(0));   // MPG.AXIS.SEL: JOG_DISABLE(0), JOG_X(1), JOG_Y(2)...
    if (jog_sel> 0)
    {
        jog_sel |= (1 << 7);            // set jog_sel[7] for MPG jogging
    }
    mpg_joint_code = ((mpg_joint_sel(2) << 2) |
                     (mpg_joint_sel(1) << 1) |
                     (mpg_joint_sel(0))) - 1;   // MPG.AXIS.SEL: JOG_DISABLE(0), JOG_X(1), JOG_Y(2)...
    for(i=0; i<6; i++)
    {
        wheel_jog_enable(i) = 0;
    }
    if (mpg_joint_code >= 0)
    {
        wheel_jog_enable(mpg_joint_code) = 1;
    }

    if (mpg_joint_code == master_gantry_id)
    {
        wheel_jog_enable(slave_gantry_id) = 1;
    }
    else if (mpg_joint_code == slave_gantry_id)
    {
        wheel_jog_enable(master_gantry_id) = 1;
    }


}
