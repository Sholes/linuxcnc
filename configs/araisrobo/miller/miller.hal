# core HAL config file for simulation - 4 joint
# load 3 differentiators for accel signals
loadrt ddt count=3
loadrt hypot count=2
loadrt spindle

# load RT modules
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD num_joints=[KINS]JOINTS num_dio=64
loadrt [WOU](WISHBONE) ctrl_type=[WOU](CTRL_TYPE) pulse_type=[WOU]PULSE_TYPE enc_type=[WOU]ENC_TYPE bits=[WOU](FPGA) bins=[WOU](RISC) servo_period_ns=[EMCMOT]SERVO_PERIOD alarm_en=[WOU]ALARM_EN max_vel_str=[JOINT_0]MAX_VELOCITY,[JOINT_1]MAX_VELOCITY,[JOINT_2]MAX_VELOCITY,[JOINT_3]MAX_VELOCITY max_accel_str=[JOINT_0]MAX_ACCELERATION,[JOINT_1]MAX_ACCELERATION,[JOINT_2]MAX_ACCELERATION,[JOINT_3]MAX_ACCELERATION max_jerk_str=[JOINT_0]MAX_JERK,[JOINT_1]MAX_JERK,[JOINT_2]MAX_JERK,[JOINT_3]MAX_JERK pos_scale_str=[JOINT_0]INPUT_SCALE,[JOINT_1]INPUT_SCALE,[JOINT_2]INPUT_SCALE,[JOINT_3]INPUT_SCALE alr_output=[WOU](ALR_OUTPUT)

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf wou.stepgen.update-freq  servo-thread
# create HAL signals for position commands from motion module
# connect position commands from motion module to step generator
addf    ddt.0           servo-thread
addf    ddt.1           servo-thread
addf    ddt.2           servo-thread
addf    hypot.0         servo-thread
addf    hypot.1         servo-thread
addf    spindle.0       servo-thread

# spindle
setp spindle.0.max-vel  [JOINT_3]MAX_VELOCITY
setp spindle.0.max-acc  [JOINT_3]MAX_ACCELERATION
setp spindle.0.max-jerk [JOINT_3]MAX_JERK
net  spindle-velocity-mode  spindle.0.velocity-mode    <= motion.spindle-velocity-mode
net  spindle-on             spindle.0.on               <= motion.spindle-on
net  spindle-speed-cmd-rps  spindle.0.velocity-cmd     <= motion.spindle-speed-cmd-rps
net  spindle-position-cmd   spindle.0.position-cmd     <= motion.spindle-position-cmd
net  spindle-curr-pos-cmd   spindle.0.curr-pos         => motion.spindle-curr-pos-cmd
net  spindle-in-position    spindle.0.in-position      => motion.spindle-in-position
net  spindle-at-speed       spindle.0.at-speed         => motion.spindle-at-speed

# send the position commands thru differentiators to
# generate velocity and accel signals
net Xvel-fb     => ddt.0.in hypot.0.in0
net Xacc        <= ddt.0.out 

net Yvel-fb     => ddt.1.in hypot.0.in1
net Yacc        <= ddt.1.out 

net Zvel        => ddt.2.in hypot.1.in0
net Zacc        <= ddt.2.out 

# Cartesian 2- and 3-axis velocities
net XYvel       hypot.0.out => hypot.1.in1
net XYZvel      <= hypot.1.out

# link usb command and status
# (MUST add the following lines for USB-MOTION protocol)
net usb-cmd wou.usb.cmd <= motion.usb.cmd
net usb-cmd-param0 wou.usb.param-00 <= motion.usb.param-00
net usb-cmd-param1 wou.usb.param-01 <= motion.usb.param-01
net usb-cmd-param2 wou.usb.param-02 <= motion.usb.param-02
net usb-cmd-param3 wou.usb.param-03 <= motion.usb.param-03

net usb-stauts wou.motion.status => motion.wou.status
net motionState motion.motion-state => wou.motion-state

net Xpos  joint.0.motor-pos-cmd => wou.stepgen.0.position-cmd 
net Ypos  joint.1.motor-pos-cmd => wou.stepgen.1.position-cmd 
net Zpos  joint.2.motor-pos-cmd => wou.stepgen.2.position-cmd 
net spindle-curr-pos-cmd        => wou.stepgen.3.position-cmd

# loop position commands back to motion module feedback
# for OPEN_LOOP
net Xpos-fb   wou.stepgen.0.position-fb => joint.0.motor-pos-fb
net Ypos-fb   wou.stepgen.1.position-fb => joint.1.motor-pos-fb
net Zpos-fb   wou.stepgen.2.position-fb => joint.2.motor-pos-fb
net Spos-fb   wou.stepgen.3.position-fb => motion.spindle-revs

# motor_index positions
net J0_index-pos wou.stepgen.0.index-pos => joint.0.index-pos
net J1_index-pos wou.stepgen.1.index-pos => joint.1.index-pos
net J2_index-pos wou.stepgen.2.index-pos => joint.2.index-pos
# net J3_index-pos wou.stepgen.3.index-pos => joint.3.index-pos

# estop loopback
# net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
net din_00  => iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# digital sync I/O signals
net sync_in_trigger     motion.sync-in-trigger =>  wou.sync.in.trigger
net sync_in_index       motion.sync-in-index =>  wou.sync.in.index
net sync_in_wait_type   motion.sync-in-wait-type =>  wou.sync.in.wait_type
net sync_in_timeout     motion.sync-in-timeout =>  wou.sync.in.timeout

# amp control
net din_00                         => motion.enable
net j0ena   joint.0.amp-enable-out => wou.stepgen.0.enable
net j1ena   joint.1.amp-enable-out => wou.stepgen.1.enable
net j2ena   joint.2.amp-enable-out => wou.stepgen.2.enable
net j3ena   joint.3.amp-enable-out => wou.stepgen.3.enable

setp wou.stepgen.0.steplen  [JOINT_0]STEPLEN
setp wou.stepgen.1.steplen  [JOINT_1]STEPLEN
setp wou.stepgen.2.steplen  [JOINT_2]STEPLEN
setp wou.stepgen.3.steplen  [JOINT_3]STEPLEN

# TODO: connect wou.rt.abort to GPIO
setp wou.rt.abort  0

# connect signals from FPGA.
# pulse_pos: the actual pulse sent to servo drive.
net pulse_pos_j0  <= wou.stepgen.0.pulse_pos
net pulse_pos_j1  <= wou.stepgen.1.pulse_pos
net pulse_pos_j2  <= wou.stepgen.2.pulse_pos
net pulse_pos_j3  <= wou.stepgen.3.pulse_pos

# enc_pos: the encoder position read from FPGA.
net enc_pos_j0 <=  wou.stepgen.0.enc_pos  
net enc_pos_j1 <=  wou.stepgen.1.enc_pos  
net enc_pos_j2 <=  wou.stepgen.2.enc_pos  
net enc_pos_j3 <=  wou.stepgen.3.enc_pos  

# pass vel status and req_status to FPGA

# set wou module scaling - get values from ini file
setp wou.stepgen.0.position-scale [JOINT_0]INPUT_SCALE
setp wou.stepgen.1.position-scale [JOINT_1]INPUT_SCALE
setp wou.stepgen.2.position-scale [JOINT_2]INPUT_SCALE
setp wou.stepgen.3.position-scale [JOINT_3]INPUT_SCALE

# set wou module pulse_per_rev - get values from ini file
setp wou.stepgen.0.pulse_per_rev [JOINT_0]PULSE_PER_REV
setp wou.stepgen.1.pulse_per_rev [JOINT_1]PULSE_PER_REV
setp wou.stepgen.2.pulse_per_rev [JOINT_2]PULSE_PER_REV
setp wou.stepgen.3.pulse_per_rev [JOINT_3]PULSE_PER_REV

# set wou module velocity limits - get values from ini file
setp wou.stepgen.0.maxvel [JOINT_0]MAX_VELOCITY
setp wou.stepgen.1.maxvel [JOINT_1]MAX_VELOCITY
setp wou.stepgen.2.maxvel [JOINT_2]MAX_VELOCITY
setp wou.stepgen.3.maxvel [JOINT_3]MAX_VELOCITY

# set wou module accel limits - get values from ini file
setp wou.stepgen.0.maxaccel [JOINT_0]MAX_ACCELERATION
setp wou.stepgen.1.maxaccel [JOINT_1]MAX_ACCELERATION
setp wou.stepgen.2.maxaccel [JOINT_2]MAX_ACCELERATION
setp wou.stepgen.3.maxaccel [JOINT_3]MAX_ACCELERATION

net j0_ferror_flag  wou.stepgen.0.ferror-flag => joint.0.usb-ferror-flag
net j1_ferror_flag  wou.stepgen.1.ferror-flag => joint.1.usb-ferror-flag
net j2_ferror_flag  wou.stepgen.2.ferror-flag => joint.2.usb-ferror-flag
net j3_ferror_flag  wou.stepgen.3.ferror-flag => joint.3.usb-ferror-flag

net j0-probed-pos   wou.stepgen.0.probed-pos => joint.0.probed-pos
net j1-probed-pos   wou.stepgen.1.probed-pos => joint.1.probed-pos
net j2-probed-pos   wou.stepgen.2.probed-pos => joint.2.probed-pos
net j3-probed-pos   wou.stepgen.3.probed-pos => joint.3.probed-pos

net vel-sync wou.motion.vel-sync
net usb-busy wou.usb-busy => motion.usb-busy

# loop position commands back to motion module feedback
net J0-risc-pos-cmd wou.stepgen.0.risc-pos-cmd => joint.0.risc-pos-cmd
net J1-risc-pos-cmd wou.stepgen.1.risc-pos-cmd => joint.1.risc-pos-cmd
net J2-risc-pos-cmd wou.stepgen.2.risc-pos-cmd => joint.2.risc-pos-cmd
net J3-risc-pos-cmd wou.stepgen.3.risc-pos-cmd => joint.3.risc-pos-cmd
# TODO: forward risc-pos-cmd to spindle.0

# for usb-homing:
# original homing switchs: 
# setp joint.0.home-sw-id 2
# setp joint.1.home-sw-id 5
# setp joint.2.home-sw-id 8
# home switch status from FPGA
# net home_j0     joint.0.home-sw-in  <=  wou.gpio.in.02
# net home_j1     joint.1.home-sw-in  <=  wou.gpio.in.05
# net home_j2     joint.2.home-sw-in  <=  wou.gpio.in.08

# use LSN as homing switch for AXIS-X, AXIS-Y:
setp joint.0.home-sw-id 4
setp joint.1.home-sw-id 6
# use LSP as homing switch for AXIS-Z:
setp joint.2.home-sw-id 9
# home switch status from FPGA
net din_04      joint.0.home-sw-in
net din_06      joint.1.home-sw-in
net din_09      joint.2.home-sw-in

net j0-homing   joint.0.homing => wou.stepgen.0.homing
net j1-homing   joint.1.homing => wou.stepgen.1.homing
net j2-homing   joint.2.homing => wou.stepgen.2.homing
net j3-homing   joint.3.homing => wou.stepgen.3.homing

net j0-risc-probe-vel    joint.0.risc-probe-vel => wou.stepgen.0.risc-probe-vel
net j1-risc-probe-vel    joint.1.risc-probe-vel => wou.stepgen.1.risc-probe-vel
net j2-risc-probe-vel    joint.2.risc-probe-vel => wou.stepgen.2.risc-probe-vel
net j3-risc-probe-vel    joint.3.risc-probe-vel => wou.stepgen.3.risc-probe-vel

net j0-risc-probe-pin    joint.0.risc-probe-pin => wou.stepgen.0.risc-probe-pin
net j1-risc-probe-pin    joint.1.risc-probe-pin => wou.stepgen.1.risc-probe-pin
net j2-risc-probe-pin    joint.2.risc-probe-pin => wou.stepgen.2.risc-probe-pin
net j3-risc-probe-pin    joint.3.risc-probe-pin => wou.stepgen.3.risc-probe-pin

net j0-risc-probe-type   joint.0.risc-probe-type => wou.stepgen.0.risc-probe-type
net j1-risc-probe-type   joint.1.risc-probe-type => wou.stepgen.1.risc-probe-type
net j2-risc-probe-type   joint.2.risc-probe-type => wou.stepgen.2.risc-probe-type
net j3-risc-probe-type   joint.3.risc-probe-type => wou.stepgen.3.risc-probe-type

net j0-risc-probe-dist   joint.0.risc-probe-dist => wou.stepgen.0.risc-probe-dist
net j1-risc-probe-dist   joint.1.risc-probe-dist => wou.stepgen.1.risc-probe-dist
net j2-risc-probe-dist   joint.2.risc-probe-dist => wou.stepgen.2.risc-probe-dist
net j3-risc-probe-dist   joint.3.risc-probe-dist => wou.stepgen.3.risc-probe-dist

# RISC_CMD REQ and ACK
net update-pos-req      wou.motion.update-pos-req   =>  motion.update-pos-req
net update-pos-ack      wou.motion.update-pos-ack   <=  motion.update-pos-ack
net rcmd-seq-num-req    wou.motion.rcmd-seq-num-req =>  motion.rcmd-seq-num-req
net rcmd-seq-num-ack    wou.motion.rcmd-seq-num-ack <=  motion.rcmd-seq-num-ack

net machine_is_on       halui.machine.is-on => wou.machine-on wou.gpio.out.00
net teleop_mode         wou.motion.teleop-mode <= motion.teleop-mode
net coord_mode          wou.motion.coord-mode <= motion.coord-mode
net homing              wou.motion.homing <= motion.homing
net probe_result        wou.motion.probe-result => motion.probe-input
net machine_is_moving   <= wou.motion.machine-is-moving

# mapping wou.gpio to motion.synch_di[]
net din_00	wou.gpio.in.00    => motion.digital-in-00
net din_01 	wou.gpio.in.01    => motion.digital-in-01
net din_02 	wou.gpio.in.02    => motion.digital-in-02
net din_03 	wou.gpio.in.03    => motion.digital-in-03
net din_04 	wou.gpio.in.04    => motion.digital-in-04
net din_05 	wou.gpio.in.05    => motion.digital-in-05
net din_06 	wou.gpio.in.06    => motion.digital-in-06
net din_07 	wou.gpio.in.07    => motion.digital-in-07
net din_08 	wou.gpio.in.08    => motion.digital-in-08
net din_09 	wou.gpio.in.09    => motion.digital-in-09
net din_10 	wou.gpio.in.10    => motion.digital-in-10
net din_11 	wou.gpio.in.11    => motion.digital-in-11
net din_12 	wou.gpio.in.12    => motion.digital-in-12
net din_13 	wou.gpio.in.13    => motion.digital-in-13
net din_14 	wou.gpio.in.14    => motion.digital-in-14
net din_15 	wou.gpio.in.15    => motion.digital-in-15
net din_16 	wou.gpio.in.16    => motion.digital-in-16
net din_17 	wou.gpio.in.17    => motion.digital-in-17
net din_18 	wou.gpio.in.18    => motion.digital-in-18
net din_19 	wou.gpio.in.19    => motion.digital-in-19
net din_20 	wou.gpio.in.20    => motion.digital-in-20
net din_21 	wou.gpio.in.21    => motion.digital-in-21
net din_22 	wou.gpio.in.22    => motion.digital-in-22
net din_23 	wou.gpio.in.23    => motion.digital-in-23
net din_24 	wou.gpio.in.24    => motion.digital-in-24
net din_25 	wou.gpio.in.25    => motion.digital-in-25
net din_26 	wou.gpio.in.26    => motion.digital-in-26
net din_27 	wou.gpio.in.27    => motion.digital-in-27
net din_28 	wou.gpio.in.28    => motion.digital-in-28
net din_29 	wou.gpio.in.29    => motion.digital-in-29
net din_30 	wou.gpio.in.30    => motion.digital-in-30
net din_31 	wou.gpio.in.31    => motion.digital-in-31

net j0_index_en   joint.0.index-enable => wou.stepgen.0.index-enable
net j1_index_en   joint.1.index-enable => wou.stepgen.1.index-enable
net j2_index_en   joint.2.index-enable => wou.stepgen.2.index-enable
net j3_index_en   joint.3.index-enable => wou.stepgen.3.index-enable

# emcrsh
# loadusr linuxcncrsh -ini xyz.ini
