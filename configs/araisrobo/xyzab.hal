# core HAL config file for simulation - 4 joint

# load RT modules
loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD num_joints=[KINS]JOINTS num_dio=64
# for "n" joints, set ctrl_type with number of "n" types
loadrt [WOU](WISHBONE) pulse_type=[WOU]PULSE_TYPE enc_type=[WOU]ENC_TYPE bits=[WOU](FPGA) bins=[WOU](RISC) servo_period_ns=[EMCMOT]SERVO_PERIOD alarm_en=[WOU]ALARM_EN max_vel_str=[JOINT_0]MAX_VELOCITY,[JOINT_1]MAX_VELOCITY,[JOINT_2]MAX_VELOCITY,[JOINT_3]MAX_VELOCITY,[JOINT_4]MAX_VELOCITY max_accel_str=[JOINT_0]MAX_ACCELERATION,[JOINT_1]MAX_ACCELERATION,[JOINT_2]MAX_ACCELERATION,[JOINT_3]MAX_ACCELERATION,[JOINT_4]MAX_ACCELERATION max_jerk_str=[JOINT_0]MAX_JERK,[JOINT_1]MAX_JERK,[JOINT_2]MAX_JERK,[JOINT_3]MAX_JERK,[JOINT_4]MAX_JERK pos_scale_str=[JOINT_0]INPUT_SCALE,[JOINT_1]INPUT_SCALE,[JOINT_2]INPUT_SCALE,[JOINT_3]INPUT_SCALE,[JOINT_4]INPUT_SCALE probe_config=[WOU](PROBE_CONFIG) alr_output=[WOU](ALR_OUTPUT)

loadrt not count=1

# add motion controller functions to servo thread
addf motion-command-handler servo-thread
addf motion-controller servo-thread
addf wou.stepgen.update-freq  servo-thread
addf not.0  servo-thread
# create HAL signals for position commands from motion module
# connect position commands from motion module to step generator

# link usb command and status
# (MUST add the following lines for USB-MOTION protocol)
net align-cmd wou.align-pos-cmd <=> motion.align-pos-cmd
net usb-cmd wou.usb.cmd <= motion.usb.cmd
net usb-cmd-param0 wou.usb.param-00 <= motion.usb.param-00
net usb-cmd-param1 wou.usb.param-01 <= motion.usb.param-01
net usb-cmd-param2 wou.usb.param-02 <= motion.usb.param-02
net usb-cmd-param3 wou.usb.param-03 <= motion.usb.param-03

net usb-stauts wou.motion.status => motion.wou.status
net motionState motion.motion-state => wou.motion-state
net x-probed joint.0.probed-pos <= wou.stepgen.0.probed-pos
net y-probed joint.1.probed-pos <= wou.stepgen.1.probed-pos
net z-probed joint.2.probed-pos <= wou.stepgen.2.probed-pos
net a-probed joint.3.probed-pos <= wou.stepgen.3.probed-pos
net b-probed joint.4.probed-pos <= wou.stepgen.4.probed-pos

net Xpos  joint.0.motor-pos-cmd => wou.stepgen.0.position-cmd # joint.0.motor-pos-fb 
net Ypos  joint.1.motor-pos-cmd => wou.stepgen.1.position-cmd # joint.1.motor-pos-fb
net Zpos  joint.2.motor-pos-cmd => wou.stepgen.2.position-cmd # joint.2.motor-pos-fb
net Apos  joint.3.motor-pos-cmd => wou.stepgen.3.position-cmd # joint.3.motor-pos-fb
net Bpos  joint.4.motor-pos-cmd => wou.stepgen.4.position-cmd # joint.4.motor-pos-fb

# loop position commands back to motion module feedback
# for OPEN_LOOP
net Xpos-fb   wou.stepgen.0.position-fb => joint.0.motor-pos-fb
net Ypos-fb   wou.stepgen.1.position-fb => joint.1.motor-pos-fb
net Zpos-fb   wou.stepgen.2.position-fb => joint.2.motor-pos-fb
net Apos-fb   wou.stepgen.3.position-fb => joint.3.motor-pos-fb
net Bpos-fb   wou.stepgen.4.position-fb => joint.4.motor-pos-fb

# home_switch positions
net J0_switch-pos wou.stepgen.0.switch-pos => joint.0.switch-pos
net J1_switch-pos wou.stepgen.1.switch-pos => joint.1.switch-pos
net J2_switch-pos wou.stepgen.2.switch-pos => joint.2.switch-pos
net J3_switch-pos wou.stepgen.3.switch-pos => joint.3.switch-pos
net J4_switch-pos wou.stepgen.4.switch-pos => joint.4.switch-pos

# motor_index positions
net J0_index-pos wou.stepgen.0.index-pos => joint.0.index-pos
net J1_index-pos wou.stepgen.1.index-pos => joint.1.index-pos
net J2_index-pos wou.stepgen.2.index-pos => joint.2.index-pos
net J3_index-pos wou.stepgen.3.index-pos => joint.3.index-pos
net J4_index-pos wou.stepgen.4.index-pos => joint.4.index-pos

# estop loopback
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in
# net din_00  => iocontrol.0.emc-enable-in

# create signals for tool loading loopback
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# amp control
net xena joint.0.amp-enable-out => wou.stepgen.0.enable
net yena joint.1.amp-enable-out => wou.stepgen.1.enable
net zena joint.2.amp-enable-out => wou.stepgen.2.enable
net aena joint.3.amp-enable-out => wou.stepgen.3.enable
net bena joint.4.amp-enable-out => wou.stepgen.4.enable


setp wou.stepgen.0.steplen  [JOINT_0]STEPLEN
setp wou.stepgen.1.steplen  [JOINT_1]STEPLEN
setp wou.stepgen.2.steplen  [JOINT_2]STEPLEN
setp wou.stepgen.3.steplen  [JOINT_3]STEPLEN
setp wou.stepgen.4.steplen  [JOINT_4]STEPLEN

# TODO: connect wou.rt.abort to GPIO
setp wou.rt.abort  0

# connect signals from FPGA.
# pulse_pos: the actual pulse sent to servo drive.
net pulse_cmd_j0  <= wou.stepgen.0.pulse_pos
net pulse_cmd_j1  <= wou.stepgen.1.pulse_pos
net pulse_cmd_j2  <= wou.stepgen.2.pulse_pos
net pulse_cmd_j3  <= wou.stepgen.3.pulse_pos
net pulse_cmd_j4  <= wou.stepgen.4.pulse_pos
# enc_pos: the encoder position read from FPGA.

net enc_pos_j0 <=  wou.stepgen.0.enc_pos  
net enc_pos_j1 <=  wou.stepgen.1.enc_pos  
net enc_pos_j2 <=  wou.stepgen.2.enc_pos  
net enc_pos_j3 <=  wou.stepgen.3.enc_pos  
net enc_pos_j4 <=  wou.stepgen.4.enc_pos  

# pass vel status and req_status to FPGA

# obsolete: net current_vel motion.current-vel => wou.current-vel
# obsolete: net requested_vel motion.requested-vel => wou.requested-vel

net sync_in_trigger     =>  wou.sync.in.trigger
net sync_in_index       =>  wou.sync.in.index
net sync_in_wait_type   =>  wou.sync.in.wait_type
net sync_in_timeout     =>  wou.sync.in.timeout

# set wou module scaling - get values from ini file
setp wou.stepgen.0.position-scale [JOINT_0]INPUT_SCALE
setp wou.stepgen.1.position-scale [JOINT_1]INPUT_SCALE
setp wou.stepgen.2.position-scale [JOINT_2]INPUT_SCALE
setp wou.stepgen.3.position-scale [JOINT_3]INPUT_SCALE
setp wou.stepgen.4.position-scale [JOINT_4]INPUT_SCALE

# set wou module velocity limits - get values from ini file
setp wou.stepgen.0.maxvel [JOINT_0]MAX_VELOCITY
setp wou.stepgen.1.maxvel [JOINT_1]MAX_VELOCITY
setp wou.stepgen.2.maxvel [JOINT_2]MAX_VELOCITY
setp wou.stepgen.3.maxvel [JOINT_3]MAX_VELOCITY
setp wou.stepgen.4.maxvel [JOINT_4]MAX_VELOCITY

# set wou module accel limits - get values from ini file
setp wou.stepgen.0.maxaccel [JOINT_0]MAX_ACCELERATION
setp wou.stepgen.1.maxaccel [JOINT_1]MAX_ACCELERATION
setp wou.stepgen.2.maxaccel [JOINT_2]MAX_ACCELERATION
setp wou.stepgen.3.maxaccel [JOINT_3]MAX_ACCELERATION
setp wou.stepgen.4.maxaccel [JOINT_4]MAX_ACCELERATION

# mapping wou.gpio to motion.synch_di[]
net din_00	wou.gpio.in.00    => motion.digital-in-00
net din_01 	wou.gpio.in.01    => motion.digital-in-01
net din_02 	wou.gpio.in.02    => motion.digital-in-02
net din_03 	wou.gpio.in.03    => motion.digital-in-03
net din_04 	wou.gpio.in.04    => motion.digital-in-04
net din_05 	wou.gpio.in.05    => motion.digital-in-05
net din_06 	wou.gpio.in.06    => motion.digital-in-06
net din_07 	wou.gpio.in.07    => motion.digital-in-07
net din_08 	wou.gpio.in.08    => motion.digital-in-08
net din_09 	wou.gpio.in.09    => motion.digital-in-09
net din_10 	wou.gpio.in.10    => motion.digital-in-10
net din_11 	wou.gpio.in.11    => motion.digital-in-11
net din_12 	wou.gpio.in.12    => motion.digital-in-12
net din_13 	wou.gpio.in.13    => motion.digital-in-13
net din_14 	wou.gpio.in.14    => motion.digital-in-14
net din_15 	wou.gpio.in.15    => motion.digital-in-15
net din_16 	wou.gpio.in.16    => motion.digital-in-16
net din_17 	wou.gpio.in.17    => motion.digital-in-17
net din_18 	wou.gpio.in.18    => motion.digital-in-18
net din_19 	wou.gpio.in.19    => motion.digital-in-19
net din_20 	wou.gpio.in.20    => motion.digital-in-20
net din_21 	wou.gpio.in.21    => motion.digital-in-21
net din_22 	wou.gpio.in.22    => motion.digital-in-22
net din_23 	wou.gpio.in.23    => motion.digital-in-23
net din_24 	wou.gpio.in.24    => motion.digital-in-24
net din_25 	wou.gpio.in.25    => motion.digital-in-25
net din_26 	wou.gpio.in.26    => motion.digital-in-26
net din_27 	wou.gpio.in.27    => motion.digital-in-27
net din_28 	wou.gpio.in.28    => motion.digital-in-28
net din_29 	wou.gpio.in.29    => motion.digital-in-29
net din_30 	wou.gpio.in.30    => motion.digital-in-30
net din_31 	wou.gpio.in.31    => motion.digital-in-31

net j0_index_en   joint.0.index-enable => wou.stepgen.0.index-enable
net j1_index_en   joint.1.index-enable => wou.stepgen.1.index-enable
net j2_index_en   joint.2.index-enable => wou.stepgen.2.index-enable
net j3_index_en   joint.3.index-enable => wou.stepgen.3.index-enable
net j4_index_en   joint.4.index-enable => wou.stepgen.4.index-enable

# emcrsh
# loadusr linuxcncrsh -ini xyz.ini
